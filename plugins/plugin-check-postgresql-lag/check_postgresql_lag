#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2014, vdnguyen <vanduc.nguyen@savoirfairelinux.com>

import psycopg2                                                                              
import sys
import re

from shinkenplugins import BasePlugin, PerfData, STATES

class Plugin(BasePlugin):
    NAME = 'check-postgresql-lag'
    VERSION = '0.1'
    DESCRIPTION = 'check postgresql streaming latency'
    AUTHOR = 'vdnguyen'
    EMAIL = 'vanduc.nguyen@savoirfairelinux.com'
    
    ARGS = [# Can't touch this:
            ('h', 'help', 'display plugin help', False),
            ('v', 'version', 'display plugin version number', False),
            # Hammer time^W^W Add your plugin arguments here:
            # ('short', 'long', 'description', 'does it expect a value?')
            ('u', 'url', 'the url to fetch data from', True),
            ('w', 'warning', 'Limit to result in a warning state', True),
            ('c', 'critical', 'Limit to result in a critical state', True),

            ]
    
    def check_args(self, args):
        # You can do your various arguments check here.
        # If you don't need to check things, you can safely remove the method.
        
        if args.get('url') and not args['url'].startswith('http'):
            return False, 'the url must be fetchable through http'
        return True, None
     
    @staticmethod
    def xlog_to_bytes(xlog):
 
        logid, offset = xlog.split('/')
        return (int('ffffffff', 16) * int(logid, 16)) + int(offset, 16)
        
    def run(self, args):
        
        # Here is the core of the plugin.
        # After doing your verifications, escape by doing:
        # self.exit(return_code, 'return_message', *performance_data)
        connection = None

        try:
            connection = psycopg2.connect(database="testdb", 
                                          user="postgres", 
                                          password="1234", 
                                          host="127.0.0.1", 
                                          port="5432")
            cursor= connection.cursor()
            cursor.execute("SELECT * from pg_stat_replication;")
            data_list = cursor.fetchone()

            
            sent_location = Plugin.xlog_to_bytes(data_list[9])
            replay_location = Plugin.xlog_to_bytes(data_list[12])
            
            print sent_location
            print replay_location
            lag = (sent_location - replay_location) / (1024.0 ** 2)
            print lag

            cursor.execute("SHOW wal_segment_size")
            wal_segment = cursor.fetchone()
            print wal_segment
            wal_segment_int = int(re.match(r'\d+', wal_segment[0]).group())            
            print wal_segment_int

            wal_segment_unit = ''.join([i for i in wal_segment[0] if not i.isdigit()])
            
            print wal_segment_unit
            
            if args.get("warning"):
                warning = int(args.get("warning"))
                critical = int(args.get("critical"))
            else:
                warning = wal_segment_int * 2
                critical = wal_segment_int * 4

        except psycopg2.DatabaseError, e:
                print "Error %s" % e
                sys.exit(1)
        finally:
            if connection:
                connection.close()
         
        if lag > critical:
            message = "CRITICAL: there's %0.2f %s" % (lag, wal_segment_unit)
            code = STATES.CRITICAL
        elif lag > warning:
            message = "WARNING: there's %0.2f %s" % (lag, wal_segment_unit)
            code = STATES.WARNING
        else:
            message = "OK: there's %0.2f %s" % (lag, wal_segment_unit)
            code = STATES.OK

        lag = "%0.2f"%(lag)
        p1 = PerfData('lag', lag, unit=wal_segment_unit, warn=warning, crit=critical, min_=0)
         
        self.exit(code, message, p1)

if __name__ == "__main__":
    Plugin()
