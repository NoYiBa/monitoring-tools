#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2014, vdnguyen <vanduc.nguyen@savoirfairelinux.com>

import psycopg2                                                                              
import sys

from shinkenplugins import BasePlugin, PerfData, STATES

class Plugin(BasePlugin):
    NAME = 'check-postgresql-lag'
    VERSION = '0.1'
    DESCRIPTION = 'check postgresql streaming latency'
    AUTHOR = 'vdnguyen'
    EMAIL = 'vanduc.nguyen@savoirfairelinux.com'
    
    ARGS = [# Can't touch this:
            ('h', 'help', 'display plugin help', False),
            ('v', 'version', 'display plugin version number', False),
            # Hammer time^W^W Add your plugin arguments here:
            # ('short', 'long', 'description', 'does it expect a value?')
            ('u', 'url', 'the url to fetch data from', True),
            ('w', 'warning', 'Limit to result in a warning state', True),
            ('c', 'critical', 'Limit to result in a critical state', True),
            ]
    
    def check_args(self, args):
        # You can do your various arguments check here.
        # If you don't need to check things, you can safely remove the method.
        
        if args.get('url') and not args['url'].startswith('http'):
            return False, 'the url must be fetchable through http'
        return True, None
    
    def run(self, args):
        
        # Here is the core of the plugin.
        # After doing your verifications, escape by doing:
        # self.exit(return_code, 'return_message', *performance_data)
        con = None

        try:
            con = psycopg2.connect(database="db1", user="postgres")
            cur = con.cursor()
            cur.execute("select * from pg_stat_replication;")
            ver = cur.fetchone()

            cur.execute("SHOW wal_segment_size")
            test = cur.fetchone()

            cur.execute("SELECT\
                         client_addr,\
                         sent_offset - (\
                         replay_offset - (sent_xlog - replay_xlog) * 255 * 16 ^ 6 ) AS byte_lag\
                         FROM (\
                         SELECT\
                         client_addr,\
                         ('x' || lpad(split_part(sent_location,   '/', 1), 8, '0'))::bit(32)::bigint AS sent_xlog,\
                         ('x' || lpad(split_part(replay_location, '/', 1), 8, '0'))::bit(32)::bigint AS replay_xlog,\
                         ('x' || lpad(split_part(sent_location,   '/', 2), 8, '0'))::bit(32)::bigint AS sent_offset,\
                         ('x' || lpad(split_part(replay_location, '/', 2), 8, '0'))::bit(32)::bigint AS replay_offset\
                         FROM pg_stat_replication\
                         ) AS s;")
            lag = cur.fetchone()

            print lag
 #   print ver
            print test
        except psycopg2.DatabaseError, e:
                print "Error %s" % e
                sys.exit(1)

        finally:
            if con:
                con.close()
        
        p1 = PerfData('spam', 42, unit='%', warn=70, crit=90, min_=0, max_=100)
        p2=  PerfData('eggs', 6, unit='%', warn=20, crit=30, min_=0, max_=100)
        
        self.exit(STATES.OK, "Everything was perfect", p1, p2)

if __name__ == "__main__":
    Plugin()