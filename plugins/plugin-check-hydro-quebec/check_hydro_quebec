#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright (C) 2014, vdnguyen <vanduc.nguyen@savoirfairelinux.com>

from shinkenplugins import BasePlugin, PerfData, STATES
from lxml.etree import tostring
from lxml import etree
from decimal import *
import lxml.html
import urllib
import re

class Plugin(BasePlugin):
    NAME = 'check-hydro-quebec'
    VERSION = '0.1'
    DESCRIPTION = 'check interruptions for all Quebec'
    AUTHOR = 'vdnguyen'
    EMAIL = 'vanduc.nguyen@savoirfairelinux.com'
    
    ARGS = [# Can't touch this:
            ('h', 'help', 'display plugin help', False),
            ('v', 'version', 'display plugin version number', False),
            # Hammer time^W^W Add your plugin arguments here:
            # ('short', 'long', 'description', 'does it expect a value?')
            ('r', 'region', 'region to check', True),
            ('u', 'url', 'the url to fetch data from', True),
            ('w', 'warning', 'Limit to result in a warning state', True),
            ('c', 'critical', 'Limit to result in a critical state', True),
      	   ('l', 'list', 'the list of regions', False),
            ]
    
    def check_args(self, args):
        # You can do your various arguments check here.
        # If you don't need to check things, you can safely remove the method.
        
        if 'list' in args:
            return True, None 
#	import pdb;pdb.set_trace()

        if not args.get('region', None):
            return False, u'you have to define the region'
 
        region = args.get('region').decode("utf-8")

        result_dict = Plugin.create_result_dict()
        if not 'critical' in args and not 'warning' in args:
            if not region.decode("utf-8") in result_dict.keys():
            	msg_err = "Region " + "'" + region + "'" + " unknown"
            	self.exit(STATES.UNKNOWN, msg_err)
            return True, None

#        if not 'critical' in args and not 'warning' in args and :
        if not 'critical' in args:
            self.exit(STATES.UNKNOWN, 'critical argument is missing')
        if not 'warning' in args: 
            self.exit(STATES.UNKNOWN, 'warning argument is missing')
        return True, None
    @staticmethod
    def chunks(l, n):
        """ Yield successive n-sized chunks from l.
        """
        for i in xrange(0, len(l), n):
            yield l[i : i + n]

    @staticmethod
    def find_number(phrase):
        number = re.findall('\d+', phrase)
        
        if len(number) == 1:
            numero = number[0]
        elif len(number) == 2:
            numero = number[0] + number[1]
        elif len(number) == 3:
            numero = number[0] + number[1] + number[2]
        elif len(number) == 4:
            numero = number[0] + number[1] + number[2] + number[3]

        numero = int(numero)
        return numero
                
    @staticmethod
    def create_result_dict():

        response = urllib.urlopen("http://pannes.hydroquebec.com/pannes/bilan-interruptions-service/#bis")
        page_source = response.read()
        root = lxml.html.fromstring(page_source)
        raw_texts = root.xpath('//td//text()')
        raw_texts = [i for i in Plugin.chunks(raw_texts, 5)]
        result_dict = {}

        for raw_text in raw_texts :
            if len(raw_text) == 5:
                key = raw_text[0]
                useless1 = raw_text[1]
                interruptions = Plugin.find_number(raw_text[2])
                customers_blackout = Plugin.find_number(raw_text[3])
                customers = Plugin.find_number(raw_text[4])
                result_dict[key] = {'interruptions': interruptions, 
                                    'customers_blackout': customers_blackout, 
                                    'customers': customers }
            elif len(raw_text) == 3:
                key = u"Across Quebec"
                interruptions = Plugin.find_number(raw_text[0])
                customers_blackout = Plugin.find_number(raw_text[1])
                clients = Plugin.find_number(raw_text[2])
                result_dict[key] = {'interruptions': interruptions, 
                                    'customers_blackout': customers_blackout, 
                                    'customers': customers }         
	return result_dict

    def run(self, args):

	result_dict = Plugin.create_result_dict()
        if 'list' in args:
            output = "\n".join([r.encode("utf-8") for r in result_dict.keys()])
            self.exit(STATES.OK, 'regions:\n' + output)
        else:
            region = args['region'].decode("utf-8")

        if 'warning' in args:
            warning = args['warning']
        else:
            warning = 100.00

        if 'critical' in args:
            critical = args['critical']
        else:
            critical = 100.00

        if not region in result_dict.keys():
            msg_err = "Region " + "'" + region + "'" + " unknown"
            self.exit(STATES.UNKNOWN, msg_err) 
        
        customers_blackout = Decimal(result_dict[region]['customers_blackout'])
        customers = Decimal(result_dict[region]['customers'])
        interruptions = result_dict[region]['interruptions']
        percent = customers_blackout / customers * 100
        round_percent = percent.quantize(Decimal('.01'), rounding = ROUND_HALF_UP) 

        warning = float(warning)
        critical = float(critical)

        if round_percent < warning:
            msg = 'OK: %0.2f%% de client coupes du reseau' % round_percent
            code = STATES.OK
        elif round_percent >= warning and round_percent < critical:
            msg = 'WARNING: %0.2f%% de client coupes du reseau' % round_percent
            code = STATES.WARNING
        elif round_percent >= critical:
            msg = 'CRITICAL: %0.2f%% de client coupes du reseau' % round_percent
            code = STATES.CRITICAL
        
	if 'list' in args:
            output = "\n".join([r.encode("utf-8") for r in result_dict.keys()])
            self.exit(STATES.OK, 'regions:\n' + output)
 
        p1 = PerfData("percent_blackout", round_percent , unit='%', warn = warning, crit = critical, min_= 0, max_ =100 )
        p2 = PerfData("interruptions", interruptions , unit='',min_= 0, max_=100)
        p3 = PerfData("custumers_blackout", customers_blackout, unit='',min_= 0, max_=100)
        self.exit(code, msg, p1, p2, p3)

if __name__ == "__main__":
    Plugin()
